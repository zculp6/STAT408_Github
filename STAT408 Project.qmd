---
title: "STAT 408 Project"
author: "Zach Culp"
format: html
editor: visual
---

# Data Exploration and Preparation

```{r}
# Load necessary libraries
library(tidyverse)
library(dplyr)

# Load data
bets <- read.csv("Data/spreadspoke_scores.csv")

# Filter and select necessary columns
bets <- bets %>%
  filter(!is.na(spread_favorite) & !is.na(over_under_line) & !is.na(weather_temperature) & !is.na(weather_wind_mph)
         & !is.na(weather_humidity))%>%
  arrange(desc(spread_favorite)) %>%
  dplyr::select(score_home, score_away, spread_favorite, over_under_line, weather_temperature, weather_wind_mph, weather_humidity, weather_detail, stadium_neutral, schedule_week, schedule_season, schedule_playoff)

# Adjust `spread_favorite` to always match the home team
bets <- bets %>%
  mutate(total_score = score_home + score_away)
  #mutate(spread_favorite = -spread_favorite)

total_score_reg <- bets %>%
  dplyr::select(total_score, over_under_line, spread_favorite, weather_temperature, weather_wind_mph, weather_humidity, stadium_neutral, schedule_week, schedule_season, schedule_playoff, weather_detail)

over_under <- bets %>%
  dplyr::select(total_score, over_under_line, spread_favorite, weather_temperature, weather_wind_mph, weather_humidity, stadium_neutral, schedule_week, schedule_season, schedule_playoff, weather_detail) %>%
  mutate(over=ifelse(total_score>over_under_line, 1,0))

ggplot(data=bets, aes(x=spread_favorite,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=weather_temperature,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=weather_wind_mph,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=weather_humidity,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=schedule_week,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=schedule_season,y=total_score)) + geom_point()
ggplot(data=bets, aes(x=weather_detail,y=total_score)) + geom_point()

```

# Total Score Model Building

```{r}
library(lmtest)
library(regclass)
mod <- lm(total_score ~ .*., total_score_reg) # none of the quadratic variables are significant or have mulitcolinearity
mod_best <- step(mod,direction = "backward",trace=0)
mod_best

new_mod <- lm(total_score ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph + weather_temperature:weather_humidity + 
    weather_temperature:schedule_season + schedule_season:weather_detail, 
    data = total_score_reg)
VIF(new_mod)
alias(new_mod)
plot(new_mod,1)
plot(new_mod,2)
bptest(new_mod)
ks.test(rstandard(new_mod),"pnorm")
# Violates both normality and homoscedasticity.

# Built the VIF_mod by removing all variables one by one until the VIF showed no colinearity from new_mod
VIF_mod <- lm(total_score ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, 
    data = total_score_reg)
VIF(VIF_mod)
plot(VIF_mod,1)
plot(VIF_mod,2)
bptest(VIF_mod)
ks.test(rstandard(VIF_mod),"pnorm")

sq_VIFmod <- lm(sqrt(total_score) ~  over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, 
    data = total_score_reg)
VIF(sq_VIFmod)
plot(sq_VIFmod,1)
plot(sq_VIFmod,2)
bptest(sq_VIFmod)
ks.test(rstandard(sq_VIFmod),"pnorm")
# violates homoscedasticity


mod_inter <- lm(abs(total_score) ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, 
    data = total_score_reg)
## Calculate the weights from mod_inter as w = 1/hat(y)^2
w <- 1/(fitted.values(mod_inter))^2
# Perform weighted least squares regression using the option inputs "weights"
mod_weight <- lm( total_score ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, 
    data = total_score_reg, weights=w)
summary(mod_weight)
plot(mod_weight,1)
plot(mod_weight,2)
bptest(mod_weight)
ks.test(rstandard(mod_weight),"pnorm")
# violates normality only


# Calculate new weights based on the fitted values of mod_sq
w_sq <- 1/(fitted.values(sq_VIFmod))^2

# Perform weighted least squares regression using the new weights
mod_sq_weights <- lm(sqrt(total_score) ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, 
    data = total_score_reg, weights = w_sq)
plot(mod_sq_weights,1)
plot(mod_sq_weights,2)
bptest(mod_sq_weights)
ks.test(rstandard(mod_sq_weights),"pnorm")
# violates homoscedasticity

poisson_mod <- glm(total_score ~ over_under_line + spread_favorite + 
    weather_temperature + weather_wind_mph + weather_humidity + 
    schedule_season + weather_detail + spread_favorite:weather_temperature + 
    weather_temperature:weather_wind_mph, data=total_score_reg, family = poisson)
plot(poisson_mod,1)
summary(poisson_mod)
plot(poisson_mod,4)

```
